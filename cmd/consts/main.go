package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"sort"
	"strings"
)

var values = [][2]string{
	{"dtls", "DTLS"},
	{"rtp", "RTP"},
	{"savpf", "SAVPF"},
	{"sctp", "SCTP"},
	{"tcp", "TCP"},
	{"tls", "TLS"},
	{"udp", "UDP"},

	{"ip4", "IP4"},
	{"ip6", "IP6"},

	{"ls", "LS"},
	{"fid", "FID"},
	{"fec", "FEC"},
	{"wms", "WMS"},

	{"candidate", "candidate"},
	{"endOfCandidates", "end-of-candidates"},
	{"idenity", "identity"},
	{"group", "group"},
	{"ssrc", "ssrc"},
	{"ssrcGroup", "ssrc-group"},
	{"msid", "msid"},
	{"msidSemantic", "msid-semantic"},
	{"mid", "mid"},
	{"iceLite", "ice-lite"},
	{"rtcpMux", "rtcp-mux"},
	{"rtcpRsize", "rtcp-rsize"},
	{"sendOnly", "sendonly"},
	{"sendRecv", "sendrecv"},
	{"recvOnly", "recvonly"},
	{"inactive", "inactive"},
	{"extmap", "extmap"},
	{"extmapAllowMixed", "extmap-allow-mixed"},

	{"in", "IN"},
	{"unroutableAddr", "0.0.0.0"},

	{"fingerprint", "fingerprint"},

	{"icePwd", "ice-pwd"},
	{"iceUfrag", "ice-ufrag"},

	{"rtpmap", "rtpmap"},
	{"fmtp", "fmtp"},

	{"active", "active"},
	{"actpass", "actpass"},
	{"application", "application"},
	{"as", "AS"},
	{"audio", "audio"},
	{"avp", "AVP"},
	{"avpf", "AVPF"},
	{"cname", "cname"},
	{"ct", "CT"},
	{"dfa", "DFA"},
	{"holdconn", "holdconn"},
	{"label", "label"},
	{"message", "message"},
	{"mslabel", "mslabel"},
	{"msrp", "MSRP"},
	{"passive", "passive"},
	{"pcma", "PCMA"},
	{"pcmu", "PCMU"},
	{"rr", "RR"},
	{"rs", "RS"},
	{"rtcpFb", "rtcp-fb"},
	{"savp", "SAVP"},
	{"setup", "setup"},
	{"text", "text"},
	{"tias", "TIAS"},
	{"unknown", "Unknown"},
	{"video", "video"},
	{"experimental", "X-"},

	{"space", " "},
	{"dash", "-"},
	{"comma", ","},
	{"semicolon", ";"},
	{"colon", ":"},
	{"slash", "/"},
}

func main() {
	sort.Slice(values, func(i, j int) bool { return values[i][0] < values[j][0] })

	var b bytes.Buffer
	b.WriteString("// Code generated by cmd/consts. DO NOT EDIT.\n\n")
	b.WriteString("package sdp\n\n")
	b.WriteString("var (\n")
	b.WriteString("\t_consts = []byte(\"")
	for _, v := range values {
		b.WriteString(v[1])
	}
	b.WriteString("\")\n\n")

	var off int
	for _, v := range values {
		b.WriteString("\tk")
		b.WriteString(strings.ToUpper(string(v[0][0])))
		b.WriteString(v[0][1:])
		b.WriteString(fmt.Sprintf(" = _consts[%d:%d:%d] // \"%s\"\n", off, off+len(v[1]), off+len(v[1]), v[1]))
		off += len(v[1])
	}
	b.WriteString(")\n")

	os.WriteFile("consts.gen.go", b.Bytes(), 0644)
	exec.Command("gofmt", "-w", "consts.gen.go").Run()
}
